<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.b.mapper.BMapper">

	<resultMap id="qcResultMap" type="egovframework.b.model.QcResultDTO">
	    <id property="qcName" column="qc_name" />
	    <result property="gumsaName1" column="gumsa_name1" />
	    <result property="qcLevel" column="qc_level" />
	    <result property="lotNo" column="lot_no" />
	    <result property="fixedMean" column="FixedMean" />
	    <result property="fixedSD" column="FixedSD" />
	    <result property="fixedCV" column="FixedCV" />
	    <result property="cumMean" column="CumMean" />
	    <result property="cumSD" column="CumSD" />
	    <result property="cumCV" column="CumCV" />
    
   		 <!-- 동적 컬럼들을 매핑하기 위한 collection -->
	    <collection property="dynamicColumns" ofType="java.util.HashMap">
	        <result column="dynamic_column_name" property="key" />
	        <result column="dynamic_column_value" property="value" />
	    </collection>
	</resultMap>
	
	
	<select id="duplicate" parameterType="egovframework.b.model.UserBDTO" resultType="int">
		SELECT COUNT(*)
		FROM USER
		WHERE ID = #{id}
	</select>
	
	<select id="findOne" parameterType="String" resultType="egovframework.b.model.UserBDTO">
		SELECT ID, PASSWORD
		FROM USER
		WHERE ID = #{id}
	</select>
	
	<select id="qcResultDate" parameterType="egovframework.b.model.QcResultDateDTO" resultType="string">
		
			
		    select distinct final_date
		    from lisq200 a
		    where 1=1
		    <if test="fromDate != null and fromDate != ''">
		    and final_date &gt;= #{fromDate}
		   	</if>
		    <if test="toDate != null and toDate != ''">
		    and final_date &lt;= #{toDate}
		    </if>
		    order by 1
		
	</select>
	
	<select id="gumsapartFindAll" resultType="string">
	<![CDATA[
		select concat('[', code, ']  ', item1) as 'jundal_part'
		from lisc002
		where code_type = UPPER('jundal_part')
		and item4 = 'Y';
		]]>
		
	</select>
	
	<select id="jangbiFindAll" resultType="string">
	<![CDATA[	
		select item1
		from lisc002
		where code_type = UPPER('jangbi_code');
		]]>
	</select>
	<select id="levelListFindAll" resultType="string">
	<![CDATA[
		select item1
		from lisc002
		where code_type = UPPER('qc_level');
		]]>
	</select>
	<select id="qcCodeFindAll" resultType="egovframework.b.model.QcCodeDTO">
	<![CDATA[
		select code, item1
		from lisc002
		where code_type = UPPER('QC_MATERIAL_CODE');
		]]>
	</select>
	
	
	
	
	<select id="qcResultFindHashMap" parameterType="egovframework.b.model.QcResultRequestDTO" resultType="java.util.LinkedHashMap">
		
			select c.qc_name as 'QC물질명', gumsa_name1 as '검사명', a.qc_level as 'Level', a.lot_no as 'LotNo', max(a.mean_value) as 'FixedMean', max(a.sd_value) as 'FixedSD', max(a.cv_value) as 'FixedCV',  ROUND(AVG(test_result), 2) as 'CumMean',  ROUND(STDDEV(test_result), 2) AS 'CumSD',  ROUND(STDDEV(test_result)/AVG(test_result)*100, 2) as 'CumCV', 
			d.item1 as '장비명'
			<if test="dateList != null and dateList.size() > 0">
			,
		  <foreach collection="dateList" item="i" separator="," index="index">    
             MAX(CASE WHEN final_date = #{i} THEN test_result ELSE null END) AS '${i}'
   		  </foreach>    
   		  	</if>
			from lisq200 a
			left join lisc100 b
			on a.test_code = b.test_code
			and a.fk_start_date = b.start_date
			left join lisq100 c
			on a.qc_code = c.qc_code
			and a.qc_level = c.qc_level
			and a.lot_no = c.lot_no
			left join (
				select code, item1
				from lisc002
				where code_type = UPPER('jangbi_code')
            ) d
            on a.jangbi_code = d.code
			where 1=1
			and qc_name is not null
			<if test="qcInOut != null and qcInOut.length() > 0">
			and a.qc_in_out = #{qcInOut}
			</if>
			<if test="ruleResult != null and ruleResult.length() > 0">
			and a.rule_result = #{ruleResult}
			</if>
			<if test="jundalPart != null and jundalPart.length() > 0">
			and a.jundal_part = #{jundalPart}
			</if>
			<if test="lotNo != null and lotNo.length() > 0">
			and a.lot_no like CONCAT('%',#{lotNo},'%')
			</if>
			<if test="level != null and level.length() > 0">
			and a.qc_level = #{level}
			</if>
			<if test="jangbi != null and jangbi.length() > 0">
			and d.item1 = #{jangbi}
			</if>
			group by c.qc_name, gumsa_name1, a.qc_level, a.lot_no, 장비명
			order by 1,2,3,4
	</select>
	<insert id="joinUser" parameterType="egovframework.b.model.UserBDTO">
		INSERT INTO USER(
			id, 
			password
		) 
		VALUES(
			#{id}, 
			#{password}
		)
	</insert>
</mapper>